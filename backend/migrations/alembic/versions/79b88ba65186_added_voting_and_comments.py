"""Added voting and comments

Revision ID: 79b88ba65186
Revises: d31d2962675b
Create Date: 2025-08-01 09:07:57.498127

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "79b88ba65186"
down_revision: Union[str, Sequence[str], None] = "d31d2962675b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # The Enum type already exists, so we create the table without attempting to recreate it.
    op.create_table(
        "commentvotes",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("comment_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        # Use postgresql.ENUM and set create_type=False to prevent the duplicate error
        sa.Column(
            "vote",
            postgresql.ENUM(
                "upvote", "downvote", name="vote_type_enum", create_type=False
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["comments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_commentvotes_comment_id"), "commentvotes", ["comment_id"], unique=False
    )
    op.create_index(
        op.f("ix_commentvotes_user_id"), "commentvotes", ["user_id"], unique=False
    )
    op.drop_index(op.f("ix_comment_votes_comment_id"), table_name="comment_votes")
    op.drop_index(op.f("ix_comment_votes_user_id"), table_name="comment_votes")
    op.drop_table("comment_votes")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "comment_votes",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("comment_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "vote",
            postgresql.ENUM("upvote", "downvote", name="vote_type_enum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["comment_id"], ["comments.id"], name=op.f("comment_votes_comment_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("comment_votes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("comment_votes_pkey")),
    )
    op.create_index(
        op.f("ix_comment_votes_user_id"), "comment_votes", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_comment_votes_comment_id"),
        "comment_votes",
        ["comment_id"],
        unique=False,
    )
    op.drop_index(op.f("ix_commentvotes_user_id"), table_name="commentvotes")
    op.drop_index(op.f("ix_commentvotes_comment_id"), table_name="commentvotes")
    op.drop_table("commentvotes")
    # ### end Alembic commands ###
