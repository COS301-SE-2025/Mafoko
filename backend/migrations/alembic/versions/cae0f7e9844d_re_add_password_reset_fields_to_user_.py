"""re-add password reset fields to user table

Revision ID: cae0f7e9844d
Revises: fbe53acc59ce
Create Date: 2025-09-28 17:29:29.640068

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision: str = "cae0f7e9844d"
down_revision: Union[str, Sequence[str], None] = "fbe53acc59ce"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_cols = [col["name"] for col in inspector.get_columns("users")]

    # Only add columns if they don't already exist
    if "password_reset_token" not in existing_cols:
        op.add_column(
            "users", sa.Column("password_reset_token", sa.String(length=255), nullable=True)
        )

    if "password_reset_expires" not in existing_cols:
        op.add_column(
            "users",
            sa.Column("password_reset_expires", sa.DateTime(timezone=True), nullable=True),
        )

    # Only create index if it doesn't already exist
    existing_indexes = [idx["name"] for idx in inspector.get_indexes("users")]
    index_name = op.f("ix_users_password_reset_token")
    if index_name not in existing_indexes:
        op.create_index(index_name, "users", ["password_reset_token"], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_password_reset_token"), table_name="users")
    op.drop_column("users", "password_reset_expires")
    op.drop_column("users", "password_reset_token")
    # ### end Alembic commands ###
