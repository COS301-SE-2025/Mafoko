\documentclass[11pt, a4paper]{article}

% --- PREAMBLE ---
\usepackage{geometry}
\usepackage{enumitem}
\usepackage{hyperref}
\geometry{a4paper, margin=1in}

\begin{document}

\section*{Mavito Project: Non-Functional Requirements}
\subsection*{Version 2.0.0}
\vspace{1em}

This document outlines the non-functional requirements (quality attributes) for the Mavito platform, reflecting the current system architecture.

\begin{description}[leftmargin=!, labelwidth=\widthof{\textbf{NFR10.3}}]

    \item[NFR1] \textbf{Performance}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR1.1 Fast Query Responses:} The system utilizes indexed tables in PostgreSQL, queried by an asynchronous backend, to ensure fast and efficient search and data retrieval operations.
        \item \textbf{NFR1.2 Lightweight Frontend:} The frontend application is built with React and Vite, producing optimized static assets for fast initial page loads and a responsive user experience.
        \item \textbf{NFR1.3 Asynchronous API:} All backend I/O operations are non-blocking, using FastAPI's async capabilities to handle concurrent requests efficiently.
    \end{itemize}

    \item[NFR2] \textbf{Scalability}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR2.1 Scalable Backend:} The backend is built on a microservices architecture. Each service is containerized with Docker and deployed to Google Cloud Run, which automatically scales based on incoming request traffic.
        \item \textbf{NFR2.2 Scalable Database:} The system uses Google Cloud SQL for PostgreSQL, a managed service that can be scaled vertically (by increasing machine size) and horizontally (with read replicas) as needed.
    \end{itemize}

    \item[NFR3] \textbf{Usability}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR3.1 Responsive UI/UX:} The UI provides a consistent and user-friendly experience across common desktop and mobile devices.
        \item \textbf{NFR3.2 Intuitive Navigation:} The application interface is designed to be simple, clean, and easy to navigate.
        \item \textbf{NFR3.3 Offline Capability:} The frontend is a Progressive Web App (PWA) that supports offline functionality. A Service Worker with Workbox Background Sync queues write-operations (like votes) made while offline and automatically syncs them when the connection is restored.
    \end{itemize}

    \item[NFR4] \textbf{Reliability}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR4.1 Data Integrity:} Using a centralized PostgreSQL database as the single source of truth ensures strong data integrity and consistency across all services.
        \item \textbf{NFR4.2 Availability:} The use of managed Google Cloud services (Cloud Run for services, Cloud SQL for the database) provides high availability and automatic recovery from failures.
    \end{itemize}

    \item[NFR5] \textbf{Security}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR5.1 Secure Authentication:} User authentication is handled by a dedicated `auth-service` using JWT (JSON Web Tokens). Passwords are not stored in plain text and are hashed using bcrypt.
        \item \textbf{NFR5.2 Secure API Access:} All backend services are fronted by a Google API Gateway, which enforces TLS/HTTPS. Protected endpoints within the services validate the JWT token to prevent unauthorized access.
        \item \textbf{NFR5.3 Secure File Uploads:} User-submitted documents are securely uploaded to a private Google Cloud Storage bucket via temporary, time-limited signed URLs, ensuring files are never exposed publicly.
    \end{itemize}

    \item[NFR6] \textbf{Maintainability \& Extensibility}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR6.1 Modular Design:} The microservices architecture allows for independent development, testing, and deployment of each component (e.g., `auth-service`, `search-service`, `vote-service`).
        \item \textbf{NFR6.2 Shared Codebase:} A central `mavito-common-lib` contains shared database models, schemas, and configurations to ensure consistency and reduce code duplication.
        \item \textbf{NFR6.3 Database Versioning:} Database schema changes are managed through a dedicated `alembic-service`, providing version control and a repeatable process for migrations.
    \end{itemize}

    \item[NFR7] \textbf{Deployment}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR7.1 Containerization:} All backend services are containerized using Docker, providing a consistent runtime environment for both local development and production.
        \item \textbf{NFR7.2 CI/CD Pipeline:} A GitHub Actions workflow automates code quality checks (linting, type-checking), testing, Docker image builds, and deployments to Google Cloud Run.
    \end{itemize}

    \item[NFR8] \textbf{Data Management}
    \begin{itemize}[nosep, leftmargin=*]
        \item \textbf{NFR8.1 Data Ingestion:} An initial, one-time script populates the PostgreSQL database from a source JSON file, migrating the data to a persistent and structured format.
        \item \textbf{NFR8.2 Data Export:} The system provides an API endpoint to allow users to download terminology datasets in common formats like JSON and CSV.
    \end{itemize}

\end{description}

\end{document}
